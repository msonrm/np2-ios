name: Build and Upload to TestFlight

on:
  workflow_dispatch:  # 手動実行
  push:
    branches: [ master ]  # masterブランチへのプッシュ時

jobs:
  build-and-upload:
    name: Build and Upload to TestFlight
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Configure App Store Connect API
      run: |
        mkdir -p ~/private_keys
        echo "${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}" > ~/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
        
    - name: Setup Certificates and Provisioning Profile
      run: |
        set -x  # Enable debug output
        
        # Create keychain
        KEYCHAIN_PATH="$HOME/build.keychain"
        echo "Creating keychain at: $KEYCHAIN_PATH"
        security create-keychain -p actions "$KEYCHAIN_PATH"
        security default-keychain -s "$KEYCHAIN_PATH"
        security unlock-keychain -p actions "$KEYCHAIN_PATH"
        security set-keychain-settings -t 3600 -l "$KEYCHAIN_PATH"
        
        # Import certificate (no password required)
        echo "Importing certificate..."
        echo "${{ secrets.DISTRIBUTION_CERTIFICATE }}" | base64 --decode > ~/distribution.p12
        security import ~/distribution.p12 -k "$KEYCHAIN_PATH" -f pkcs12 -A -T /usr/bin/codesign -T /usr/bin/xcodebuild
        
        echo "Setting up keychain list..."
        security list-keychains -d user -s "$KEYCHAIN_PATH"
        
        echo "Setting key partition list..."
        security set-key-partition-list -S apple-tool:,apple: -s -k actions "$KEYCHAIN_PATH" || echo "Warning: set-key-partition-list failed, continuing..."
        
        # Install provisioning profile
        echo "Installing provisioning profile..."
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision
        
        echo "Certificate and provisioning profile setup completed"
        
    - name: Build and Archive
      run: |
        cd sdl2/iOS
        
        echo "=== Starting build process ==="
        echo "Current directory: $(pwd)"
        echo "Available schemes:"
        xcodebuild -project np2sdl2.xcodeproj -list
        
        echo "=== Building with manual signing ==="
        echo "Build started at: $(date)"
        
        xcodebuild \
          -project np2sdl2.xcodeproj \
          -scheme np2sdl2 \
          -destination "generic/platform=iOS" \
          -configuration Release \
          -archivePath np2sdl2.xcarchive \
          IPHONEOS_DEPLOYMENT_TARGET=12.0 \
          CODE_SIGN_STYLE=Manual \
          DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }} \
          PRODUCT_BUNDLE_IDENTIFIER=com.msonrm.np2sdl2 \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          -quiet \
          archive
          
        echo "Build completed at: $(date)"
        echo "Archive created: $(ls -la *.xcarchive)"
          
    - name: Export IPA
      run: |
        cd sdl2/iOS
        
        # Export options plist作成
        cat > exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        # IPA作成
        xcodebuild \
          -exportArchive \
          -archivePath np2sdl2.xcarchive \
          -exportPath export \
          -exportOptionsPlist exportOptions.plist
          
    - name: Upload to TestFlight
      run: |
        cd sdl2/iOS
        
        # TestFlightにアップロード
        xcrun altool \
          --upload-app \
          --type ios \
          --file export/*.ipa \
          --apiKey ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }} \
          --apiIssuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }} \
          --verbose
          
    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v4
      with:
        name: np2-ipa
        path: sdl2/iOS/export/*.ipa
        retention-days: 7
        
    - name: Success Message
      run: |
        echo "============================================"
        echo "✅ Build and upload completed successfully!"
        echo "============================================"
        echo "The app has been uploaded to TestFlight."
        echo "Check App Store Connect for processing status."
        echo "============================================"