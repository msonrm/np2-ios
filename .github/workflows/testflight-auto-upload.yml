name: Build and Upload to TestFlight

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  build:
    name: Build and Upload to TestFlight
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Install Certificate and Setup Authentication
      env:
        PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: "actions"
        API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
        API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      run: |
        # Setup App Store Connect API for automatic provisioning
        mkdir -p ~/private_keys
        echo "$API_PRIVATE_KEY" > ~/private_keys/AuthKey_$API_KEY_ID.p8
        
        # Set environment for automatic provisioning
        echo "FASTLANE_USER=$API_KEY_ID" >> $GITHUB_ENV
        echo "FASTLANE_PASSWORD=$API_ISSUER_ID" >> $GITHUB_ENV
        # Create keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Import certificate (using existing file directly)
        CERT_PATH="$GITHUB_WORKSPACE/certificates/ios_distribution_nopass.p12"
        echo "Looking for certificate at: $CERT_PATH"
        ls -la $GITHUB_WORKSPACE/certificates/
        
        if [ -f "$CERT_PATH" ]; then
          echo "Certificate file found: $CERT_PATH"
          file "$CERT_PATH"
          
          # Test certificate first
          openssl pkcs12 -info -in "$CERT_PATH" -passin pass: -noout || echo "OpenSSL test failed"
          
          # Extract certificate and private key separately
          TEMP_CERT="$RUNNER_TEMP/cert.pem"
          TEMP_KEY="$RUNNER_TEMP/key.pem" 
          TEMP_P12="$RUNNER_TEMP/final.p12"
          
          # Extract certificate
          openssl pkcs12 -in "$CERT_PATH" -clcerts -nokeys -out "$TEMP_CERT" -passin pass:
          
          # Extract private key
          openssl pkcs12 -in "$CERT_PATH" -nocerts -nodes -out "$TEMP_KEY" -passin pass:
          
          # Create new PKCS12 with macOS-compatible format
          openssl pkcs12 -export -in "$TEMP_CERT" -inkey "$TEMP_KEY" -out "$TEMP_P12" -passout pass:macospass123 -name "iOS Distribution"
          
          # Import the newly created certificate
          security import "$TEMP_P12" -P "macospass123" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign -T /usr/bin/xcodebuild
        else
          echo "Certificate file not found: $CERT_PATH"
          exit 1
        fi
        
        # Install provisioning profile
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PP_PATH
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Get the actual profile name from the file
        if PROFILE_CONTENT=$(security cms -D -i $PP_PATH 2>/dev/null); then
          PROFILE_NAME=$(echo "$PROFILE_CONTENT" | plutil -extract Name raw - 2>/dev/null || echo "unknown")
          PROFILE_UUID=$(echo "$PROFILE_CONTENT" | plutil -extract UUID raw - 2>/dev/null || echo "unknown")
          echo "Profile Name: $PROFILE_NAME"
          echo "Profile UUID: $PROFILE_UUID"
          
          # Copy with UUID name if we got it
          if [ "$PROFILE_UUID" != "unknown" ]; then
            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
          fi
        else
          echo "Warning: Could not decode provisioning profile with security cms"
          # Try alternative method - just use the file as-is
          PROFILE_NAME="com.msonrm.np2sdl2 Distribution"
          echo "Using fallback profile name: $PROFILE_NAME"
        fi
        
        # List installed profiles for verification
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Verify setup
        security find-identity -v -p codesigning $KEYCHAIN_PATH
        
    - name: Configure Project and Build Archive
      run: |
        cd sdl2/iOS
        
        # List available profiles
        echo "Available provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Get the UUID of the provisioning profile
        PP_FILES=(~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision)
        if [ -f "${PP_FILES[0]}" ]; then
          PP_FILE="${PP_FILES[0]}"
          PP_UUID=$(basename "$PP_FILE" .mobileprovision)
          echo "Found provisioning profile: $PP_FILE"
          echo "Using provisioning profile UUID: $PP_UUID"
        else
          echo "Error: No provisioning profile found"
          exit 1
        fi
        
        # Update project settings using PlistBuddy
        /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:CODE_SIGN_STYLE Manual" np2sdl2.xcodeproj/project.pbxproj 2>/dev/null || true
        /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:DEVELOPMENT_TEAM ${{ secrets.APPLE_TEAM_ID }}" np2sdl2.xcodeproj/project.pbxproj 2>/dev/null || true
        /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:CODE_SIGN_IDENTITY[sdk=iphoneos*] iPhone Distribution" np2sdl2.xcodeproj/project.pbxproj 2>/dev/null || true
        /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:PROVISIONING_PROFILE_SPECIFIER $PP_UUID" np2sdl2.xcodeproj/project.pbxproj 2>/dev/null || true
        
        echo "=== Building for App Store distribution ==="
        xcodebuild \
          -project np2sdl2.xcodeproj \
          -scheme np2sdl2 \
          -destination "generic/platform=iOS" \
          -configuration Release \
          -archivePath np2sdl2.xcarchive \
          IPHONEOS_DEPLOYMENT_TARGET=12.0 \
          archive
          
    - name: Export IPA
      run: |
        cd sdl2/iOS
        
        # Create export options
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>destination</key>
            <string>upload</string>
            <key>signingStyle</key>
            <string>manual</string>
        </dict>
        </plist>
        EOF
        
        # Export IPA
        xcodebuild \
          -exportArchive \
          -archivePath np2sdl2.xcarchive \
          -exportPath export \
          -exportOptionsPlist ExportOptions.plist
          
    - name: Upload to TestFlight
      env:
        API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
        API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      run: |
        cd sdl2/iOS
        
        # Create App Store Connect API key file
        mkdir -p ~/private_keys
        echo "$API_PRIVATE_KEY" > ~/private_keys/AuthKey_$API_KEY_ID.p8
        
        # Upload to TestFlight using altool
        xcrun altool --upload-app \
          --type ios \
          --file export/*.ipa \
          --apiKey $API_KEY_ID \
          --apiIssuer $API_ISSUER_ID \
          --verbose
        
    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v4
      with:
        name: np2-ipa
        path: sdl2/iOS/export/*.ipa
        retention-days: 7